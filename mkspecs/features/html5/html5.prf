# Creates an HTML + JS file, to be executed with emrun or node
contains(TEMPLATE, .*app) {
    !contains(TARGET, .html): TARGET = $${TARGET}.html
    QMAKE_INCDIR += $$(HOME)/.emscripten_ports/openssl/include

    CONFIG += static
        js_file.files = $${TARGET}.js
        js_file.path += $$target.path
        isEmpty(js_file.path)
          js_file.path += ./
        INSTALLS += js_file

    !contains(CONFIG,config_test):!build_pass:cross_compile: {
        QMAKE_CFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
        QMAKE_CXXFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
        QMAKE_LFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
    }

    exists($$[QT_INSTALL_PLUGINS]/platforms/html5_shell.html) {
        # dont pass this until it's installed somewhere
        # otherwise makespec test fails during qt configure
        QMAKE_LFLAGS += --shell-file  $$[QT_INSTALL_PLUGINS]/platforms/html5_shell.html
    } else {
        ## internal build. not installed
        MODULE_BASE_OUTDIR = $$shadowed($$dirname(_QMAKE_CONF_))
        QMAKE_LFLAGS += --shell-file $$PWD/../../../src/plugins/platforms/html5/html5_shell.html
    }

    # emscripten ports are linked into the main module (this app), not the Qt
    # libs which reference them
    qt {
        qt_depends = $$resolve_depends(QT, "QT.")
        contains(qt_depends, core(-private)?): QMAKE_LFLAGS += \
            $$QMAKE_LIBS_THREAD $$QMAKE_LIBS_ZLIB
        contains(qt_depends, gui(-private)?): QMAKE_LFLAGS += \
            $$QMAKE_LIBS_FREETYPE $$QMAKE_LIBS_LIBPNG
    }
}

# Creates the stand-alone version of the library from bitcode
!static:contains(TEMPLATE, .*lib): {
    load(resolve_target)
    QMAKE_POST_LINK += $$QMAKE_LINK_SHLIB $$QMAKE_RESOLVED_TARGET -o $${QMAKE_RESOLVED_TARGET}.js

    QMAKE_INCDIR += $$(HOME)/.emscripten_ports/openssl/include

    !build_pass:cross_compile: {
        QMAKE_CFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
        QMAKE_LFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
        QMAKE_CXXFLAGS += -s WASM=1 -s \"BINARYEN_METHOD=\'native-wasm\'\"
    }
}
